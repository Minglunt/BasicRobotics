#!/usr/bin/env python  
import rospy

import numpy

import tf
import tf2_ros
import geometry_msgs.msg


def homeworkone():

    t1 = geometry_msgs.msg.TransformStamped()
    t1.header.stamp = rospy.Time.now()
    t1.header.frame_id = "base"
    t1.child_frame_id = "object"
    T1 = numpy.dot(tf.transformations.euler_matrix(0.64, 0.64, 0.0),
                   tf.transformations.translation_matrix((1.5, 0.8, 0.0)))
    tr1 = tf.transformations.translation_from_matrix(T1)
    t1.transform.translation.x = tr1[0]
    t1.transform.translation.y = tr1[1]
    t1.transform.translation.z = tr1[2]
    qr1 = tf.transformations.quaternion_from_matrix(T1)
    t1.transform.rotation.x = qr1[0]
    t1.transform.rotation.y = qr1[1]
    t1.transform.rotation.z = qr1[2]
    t1.transform.rotation.w = qr1[3]
    br.sendTransform(t1)

    t2 = geometry_msgs.msg.TransformStamped()
    t2.header.stamp = rospy.Time.now()
    t2.header.frame_id = "base"
    t2.child_frame_id = "robot"
    T2 = numpy.dot(tf.transformations.euler_matrix(0, 1.5, 0),
                   tf.transformations.translation_matrix((0.0, 0.0, -2.0)))
    qr2 = tf.transformations.quaternion_from_matrix(T2)
    t2.transform.rotation.x = qr2[0]
    t2.transform.rotation.y = qr2[1]
    t2.transform.rotation.z = qr2[2]
    t2.transform.rotation.w = qr2[3]
    tr2 = tf.transformations.translation_from_matrix(T2)
    t2.transform.translation.x = tr2[0]
    t2.transform.translation.y = tr2[1]
    t2.transform.translation.z = tr2[2]
    br.sendTransform(t2)



if __name__ == '__main__':
    rospy.init_node('solution')

    br = tf2_ros.TransformBroadcaster()
    rospy.sleep(0.1)

    while not rospy.is_shutdown():
        homeworkone()
        rospy.sleep(0.1)
